
services:

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    hostname: kafka
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
      - "9093:9093"
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.3
    container_name: elasticsearch
    environment:
      discovery.type: "single-node"
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s

  kibana:
    image: docker.elastic.co/kibana/kibana:9.1.3
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    depends_on:
      elasticsearch:
        condition: service_healthy

  # mongodb:
  #   image: mongodb/mongodb-community-server:latest
  #   container_name: mongodb
  #   ports:
  #     - "27017:27017"
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 12
  #     start_period: 20s

  face_detection:
    build:
      context: .
      dockerfile: face_detection/Dockerfile
    container_name: face-detection-service
    environment:
      LOGGER_NAME: face_detection_logger
      MONGO_URI: "mongodb+srv://arieltanami122_db_user:OHod6QgGER7wp09F@facedb.k2ycus.mongodb.net/?retryWrites=true&w=majority&appName=facedb"
      MONGODB_DB_NAME: face_identity
      COLLECTION_NAME: Photo_storage
      KAFKA_BOOTSTRAP: kafka:9092
      KAFKA_TOPIC: image_uploaded
      ES_HOST: elasticsearch
      ES_PORT: 9200
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket; s=socket.socket(); s.settimeout(2); s.connect((\"localhost\",8000)); s.close()'"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  camera_uploader:
    build:
      context: .
      dockerfile: camera_uploader/Dockerfile
    container_name: camera-uploader-service
    environment:
      SERVER_URL: ws://face_detection:8000/camera/upload-image
      ES_HOST: elasticsearch
      ES_PORT: 9200
      CAMERA_URL: rtsp://192.168.16.2:8554/all.stream
    depends_on:
      face_detection:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  event_processor_service:
    build:
      context: .
      dockerfile: event_processor_service/Dockerfile
    container_name: event-processor-service
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: event
      KAFKA_CONSUMER_GROUP: event_consumer_group
      MONGO_URI: "mongodb+srv://arieltanami122_db_user:OHod6QgGER7wp09F@facedb.k2ycus.mongodb.net/?retryWrites=true&w=majority&appName=facedb"
      MONGO_DB: face_identity
      MONGO_COLLECTION: Event
      LOGGER_NAME: event_processor_service_logger
    depends_on:
      kafka:
        condition: service_healthy


  face_embedding:
    build:
      context: .
      dockerfile: face_embedding/Dockerfile
    container_name: face-embedding-service
    environment:
      BOOTSTRAP_SERVER: kafka:9092
      KAFKA_CONSUME_TOPIC: image_uploaded
      KAFKA_PRODUCE_TOPIC: new_vector
      KAFKA_KEY: image_uploaded
      KAFKA_GROUP_ID: face_embedding
      ES_HOST: elasticsearch
      ES_PORT: 9200
      ES_INDEX: logger
      MONGO_URI: "mongodb+srv://arieltanami122_db_user:OHod6QgGER7wp09F@facedb.k2ycus.mongodb.net/?retryWrites=true&w=majority&appName=facedb"
      MONGO_DATABASE: face_identity
      MONGO_COLLECTION: Photo_storage
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  updating_vector_identities_service:
    build:
      context: .
      dockerfile: updating_vector_identities_service/Dockerfile
    container_name: updating-vector-identities-service
    environment:
      LOGGER_NAME: podcast_content_monitoring_system
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC_FILE_METADATA: file-metadata
      KAFKA_TOPIC_INCOME_PROCESSING: icome-processing
      KAFKA_GROUP_ID_FILE_METADATA: information_consumption_processing
      ELASTICSEARCH_HOST: "http://elasticsearch:9200"
      ELASTICSEARCH_INDEX_IMAGE_EMBEDDINGS: image_embeddings
      ELASTICSEARCH_INDEX_PERSONS: persons
      ELASTICSEARCH_INDEX_LOG: logging
      ELASTICSEARCH_MAPPING_IMAGE_EMBEDDINGS: updating_vector_identities_service/config/elasticsearch_mapping.json
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  vector_search:
    build:
      context: .
      dockerfile: Vector_Search/Dockerfile
    container_name: vector-search-service
    environment:
      ELASTIC_HOST: "http://elasticsearch"
      ELASTIC_PORT: "9200"
      REGULAR_INDEX_NAME: persons
      OPTIMIZE_INDEX_NAME: optimize_vector_identification
      KAFKA_HOST: kafka
      KAFKA_PORT: "9092"
      NEW_VECTOR_TOPIC: new_vector
      NEW_VECTOR_PERSON_TOPIC: new_vector_person
      NEW_VECTOR_APPROVAL_PERSON: new_vector_approval_person
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
